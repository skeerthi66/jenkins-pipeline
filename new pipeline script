pipeline {
    agent any

    environment {
        PATH = "${PATH}:/opt/chef-workstation/embedded/bin"
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo 'Checking out code...'
                checkout scm
            }
        }

        stage('Unit Test') {
            steps {
                echo 'Performing unit tests...'
                sh '/opt/chef-workstation/embedded/bin/kitchen test'
            }
        }

        stage('Deployable Bundle Creation') {
            steps {
                echo 'Creating Deploy Bundle...'
                sh '/opt/chef-workstation/embedded/bin/chef install Policyfile.rb'
                sh 'cat Policyfile.lock.json'
            }
        }

        stage('Deploy Approval') {
            steps {
                timeout(time: 15, unit: "MINUTES") {
                    input message: 'Do you want to approve the deployment?', ok: 'Yes'
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying....'
                sh '/opt/chef-workstation/embedded/bin/chef push prod Policyfile.lock.json'
                sh '/opt/chef-workstation/embedded/bin/knife ssh "name:web_server" "sudo chef-client" -a cloud.public_ipv4 -x ubuntu'
            }
        }

        stage('Compliance Check') {
            steps {
                echo 'Running compliance checks with InSpec...'
                sh '/opt/chef-workstation/embedded/bin/inspec exec /full/path/to/my_compliance_profile'
            }
        }

        stage('Archive Results') {
            steps {
                echo 'Archiving compliance results...'
                archiveArtifacts artifacts: '**/inspec-*.json', allowEmptyArchive: true
                junit '**/inspec-*.json'
            }
        }
    }

    post {
        always {
            echo 'Build finished!'
            mail to: 'saikeerthi@gmail.com',
                 subject: "Build ${currentBuild.fullDisplayName}",
                 body: "Build ${currentBuild.fullDisplayName} finished with status: ${currentBuild.currentResult}"
        }
    }
}
